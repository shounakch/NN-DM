// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// adj_mat
arma::mat adj_mat(arma::mat grand_nbd);
RcppExport SEXP _NNDM_adj_mat(SEXP grand_nbdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type grand_nbd(grand_nbdSEXP);
    rcpp_result_gen = Rcpp::wrap(adj_mat(grand_nbd));
    return rcpp_result_gen;
END_RCPP
}
// Tmats
arma::cube Tmats(int n, int p, int L, int k, arma::mat all_nbd, arma::mat x, arma::mat adj_mat, arma::vec phi0seq, arma::mat grand_means, arma::cube grand_vars, arma::vec mu0, float nu0, float gamma0);
RcppExport SEXP _NNDM_Tmats(SEXP nSEXP, SEXP pSEXP, SEXP LSEXP, SEXP kSEXP, SEXP all_nbdSEXP, SEXP xSEXP, SEXP adj_matSEXP, SEXP phi0seqSEXP, SEXP grand_meansSEXP, SEXP grand_varsSEXP, SEXP mu0SEXP, SEXP nu0SEXP, SEXP gamma0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type all_nbd(all_nbdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type adj_mat(adj_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi0seq(phi0seqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grand_means(grand_meansSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type grand_vars(grand_varsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< float >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< float >::type gamma0(gamma0SEXP);
    rcpp_result_gen = Rcpp::wrap(Tmats(n, p, L, k, all_nbd, x, adj_mat, phi0seq, grand_means, grand_vars, mu0, nu0, gamma0));
    return rcpp_result_gen;
END_RCPP
}
// adj_mat_univ
arma::mat adj_mat_univ(arma::mat grand_nbd);
RcppExport SEXP _NNDM_adj_mat_univ(SEXP grand_nbdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type grand_nbd(grand_nbdSEXP);
    rcpp_result_gen = Rcpp::wrap(adj_mat_univ(grand_nbd));
    return rcpp_result_gen;
END_RCPP
}
// Tmats_univ
arma::cube Tmats_univ(int n, int L, int k, arma::mat all_nbd, arma::vec x, arma::mat adj_mat, arma::vec phi0seq, arma::vec grand_means, arma::vec grand_vars, float mu0, float nu0, float gamma0);
RcppExport SEXP _NNDM_Tmats_univ(SEXP nSEXP, SEXP LSEXP, SEXP kSEXP, SEXP all_nbdSEXP, SEXP xSEXP, SEXP adj_matSEXP, SEXP phi0seqSEXP, SEXP grand_meansSEXP, SEXP grand_varsSEXP, SEXP mu0SEXP, SEXP nu0SEXP, SEXP gamma0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type all_nbd(all_nbdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type adj_mat(adj_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi0seq(phi0seqSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type grand_means(grand_meansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type grand_vars(grand_varsSEXP);
    Rcpp::traits::input_parameter< float >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< float >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< float >::type gamma0(gamma0SEXP);
    rcpp_result_gen = Rcpp::wrap(Tmats_univ(n, L, k, all_nbd, x, adj_mat, phi0seq, grand_means, grand_vars, mu0, nu0, gamma0));
    return rcpp_result_gen;
END_RCPP
}
// random_gamma
double random_gamma(float a);
RcppExport SEXP _NNDM_random_gamma(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(random_gamma(a));
    return rcpp_result_gen;
END_RCPP
}
// random_gaussian
arma::vec random_gaussian(int p);
RcppExport SEXP _NNDM_random_gaussian(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(random_gaussian(p));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(double seed);
RcppExport SEXP _NNDM_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// fdraws
arma::mat fdraws(int n, float p, int s, int MC, arma::vec wtvec, arma::mat mu_vec, Rcpp::List psi_inv, float gamman, float nun, arma::mat inputpt);
RcppExport SEXP _NNDM_fdraws(SEXP nSEXP, SEXP pSEXP, SEXP sSEXP, SEXP MCSEXP, SEXP wtvecSEXP, SEXP mu_vecSEXP, SEXP psi_invSEXP, SEXP gammanSEXP, SEXP nunSEXP, SEXP inputptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< float >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type MC(MCSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type wtvec(wtvecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu_vec(mu_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type psi_inv(psi_invSEXP);
    Rcpp::traits::input_parameter< float >::type gamman(gammanSEXP);
    Rcpp::traits::input_parameter< float >::type nun(nunSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inputpt(inputptSEXP);
    rcpp_result_gen = Rcpp::wrap(fdraws(n, p, s, MC, wtvec, mu_vec, psi_inv, gamman, nun, inputpt));
    return rcpp_result_gen;
END_RCPP
}
// NNDM_pmean
arma::mat NNDM_pmean(int n, float p, int s, arma::mat mu_vec, Rcpp::List bw_inv, float df_n, float nun, arma::mat inputpt);
RcppExport SEXP _NNDM_NNDM_pmean(SEXP nSEXP, SEXP pSEXP, SEXP sSEXP, SEXP mu_vecSEXP, SEXP bw_invSEXP, SEXP df_nSEXP, SEXP nunSEXP, SEXP inputptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< float >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu_vec(mu_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bw_inv(bw_invSEXP);
    Rcpp::traits::input_parameter< float >::type df_n(df_nSEXP);
    Rcpp::traits::input_parameter< float >::type nun(nunSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inputpt(inputptSEXP);
    rcpp_result_gen = Rcpp::wrap(NNDM_pmean(n, p, s, mu_vec, bw_inv, df_n, nun, inputpt));
    return rcpp_result_gen;
END_RCPP
}
// random_gamma_univ
double random_gamma_univ(float a);
RcppExport SEXP _NNDM_random_gamma_univ(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(random_gamma_univ(a));
    return rcpp_result_gen;
END_RCPP
}
// fdraws_univ
arma::mat fdraws_univ(int n, int s, int MC, arma::vec wtvec, arma::vec mu_vec, arma::vec rate_par, float gamman, float nun, arma::vec inputpt);
RcppExport SEXP _NNDM_fdraws_univ(SEXP nSEXP, SEXP sSEXP, SEXP MCSEXP, SEXP wtvecSEXP, SEXP mu_vecSEXP, SEXP rate_parSEXP, SEXP gammanSEXP, SEXP nunSEXP, SEXP inputptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type MC(MCSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type wtvec(wtvecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_vec(mu_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rate_par(rate_parSEXP);
    Rcpp::traits::input_parameter< float >::type gamman(gammanSEXP);
    Rcpp::traits::input_parameter< float >::type nun(nunSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type inputpt(inputptSEXP);
    rcpp_result_gen = Rcpp::wrap(fdraws_univ(n, s, MC, wtvec, mu_vec, rate_par, gamman, nun, inputpt));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NNDM_adj_mat", (DL_FUNC) &_NNDM_adj_mat, 1},
    {"_NNDM_Tmats", (DL_FUNC) &_NNDM_Tmats, 13},
    {"_NNDM_adj_mat_univ", (DL_FUNC) &_NNDM_adj_mat_univ, 1},
    {"_NNDM_Tmats_univ", (DL_FUNC) &_NNDM_Tmats_univ, 12},
    {"_NNDM_random_gamma", (DL_FUNC) &_NNDM_random_gamma, 1},
    {"_NNDM_random_gaussian", (DL_FUNC) &_NNDM_random_gaussian, 1},
    {"_NNDM_set_seed", (DL_FUNC) &_NNDM_set_seed, 1},
    {"_NNDM_fdraws", (DL_FUNC) &_NNDM_fdraws, 10},
    {"_NNDM_NNDM_pmean", (DL_FUNC) &_NNDM_NNDM_pmean, 8},
    {"_NNDM_random_gamma_univ", (DL_FUNC) &_NNDM_random_gamma_univ, 1},
    {"_NNDM_fdraws_univ", (DL_FUNC) &_NNDM_fdraws_univ, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_NNDM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
