Rcpp::sourceCpp('C:/Users/ShounakC/Dropbox/NN-DP/Code/Univariate Density Estimation - NNDP/Updated Codes - Estimation/NNDP_MCSample.cpp')
Rcpp::sourceCpp('C:/Users/ShounakC/Dropbox/NN-DP/Code/Univariate Density Estimation - NNDP/Updated Codes - Estimation/LOOCV_Univ_Faster.cpp')
source('C:/Users/ShounakC/Dropbox/NN-DP/Code/Univariate Density Estimation - NNDP/Updated Codes - Estimation/LOOCV_Univ_phi0.R', echo=TRUE)
source('C:/Users/ShounakC/Dropbox/NN-DP/Code/Univariate Density Estimation - NNDP/Updated Codes - Estimation/NNDP_Univariate_DisjointNbd.R', echo=TRUE)
n=500
n_replicates=1
true_den_num=6
library(dirichletprocess)
n=n
k=ceiling(n^(0.3))
mu0=0
nu0=0.001
gamma0=1
alpha = 0.1
MC = 1000
x = rberdev(n, dnum=true_den_num)
inputpt=rberdev(500, dnum = true_den_num)
trueval = dberdev(inputpt, dnum = true_den_num)
t.cv1 = Sys.time()
phi0seq1 = seq(0.01,5,length.out = 30)
cv1 = univ_LOOCV(x, k, mu0, nu0, phi0seq1, gamma0)
phi01 = phi0seq1[which.max(cv1)]
phi0seq2 = seq(max(0, phi01-0.5),phi01+0.5,length.out = 40)
cv2 = univ_LOOCV(x, k, mu0, nu0, phi0seq2, gamma0)
phi0sq = phi0seq2[which.max(cv2)]
t.cv2 = Sys.time()
t.cv = t.cv2 - t.cv1
t.NNDP1 = Sys.time()
N1 = uNNDP(x, MC, k, inputpt, mu0, nu0, gamma0, phi0sq, alpha)
t.NNDP2 = Sys.time()
t.NNDP = t.NNDP2 - t.NNDP1
f_stor = N1$f_stor
kde_res = kde(x, h = hlscv(x), eval.points = inputpt)$estimate
t.DP1 = Sys.time()
dpobj = DirichletProcessGaussian(x)
dpDraw = Fit(dpobj, 1000, updatePrior = FALSE, progressBar = TRUE)
dpEst = PosteriorFrame(dpDraw, inputpt, ci_size = 0.05)
t.DP2 = Sys.time()
t.DP = t.DP2 - t.DP1
t.NNDP+t.cv
t.DP
fnndp=rowMeans(f_stor)
l
f0 = trueval
mean(abs(f0-fnndp)/f0)
mean(abs(f0-kde_res)/f0)
kde_res = kde(x, h = hlscv(x), eval.points = inputpt)$estimate
mean(abs(f0-kde_res)/f0)
true_den_num
mean(abs(f0-dpEst$Mean)/f0)
n=n
k=ceiling(n^(0.4))
mu0=0
nu0=0.001
gamma0=1
alpha = 0.1
MC = 1000
t.cv1 = Sys.time()
phi0seq1 = seq(0.01,5,length.out = 30)
cv1 = univ_LOOCV(x, k, mu0, nu0, phi0seq1, gamma0)
phi01 = phi0seq1[which.max(cv1)]
phi0seq2 = seq(max(0, phi01-0.5),phi01+0.5,length.out = 40)
cv2 = univ_LOOCV(x, k, mu0, nu0, phi0seq2, gamma0)
phi0sq = phi0seq2[which.max(cv2)]
t.cv2 = Sys.time()
t.cv = t.cv2 - t.cv1
##Now do NNDP
t.NNDP1 = Sys.time()
N1 = uNNDP(x, MC, k, inputpt, mu0, nu0, gamma0, phi0sq, alpha)
t.NNDP2 = Sys.time()
t.NNDP = t.NNDP2 - t.NNDP1
f_stor = N1$f_stor
fnndp=rowMeans(f_stor)
mean(abs(f0-fnndp)/f0)
true_den_num=11
n=n
k=ceiling(n^(0.3))
mu0=0
nu0=0.001
gamma0=1
alpha = 0.1
MC = 1000
x = rberdev(n, dnum=true_den_num)
inputpt = rberdev(500, true_den_num)
trueval = dberdev(inputpt, dnum = true_den_num)
t.cv1 = Sys.time()
phi0seq1 = seq(0.01,5,length.out = 30)
cv1 = univ_LOOCV(x, k, mu0, nu0, phi0seq1, gamma0)
phi01 = phi0seq1[which.max(cv1)]
phi0seq2 = seq(max(0, phi01-0.5),phi01+0.5,length.out = 40)
cv2 = univ_LOOCV(x, k, mu0, nu0, phi0seq2, gamma0)
phi0sq = phi0seq2[which.max(cv2)]
t.cv2 = Sys.time()
t.cv = t.cv2 - t.cv1
n
phi0sq
t.NNDP1 = Sys.time()
N1 = uNNDP(x, MC, k, inputpt, mu0, nu0, gamma0, phi0sq, alpha)
t.NNDP2 = Sys.time()
t.NNDP = t.NNDP2 - t.NNDP1
f_stor = N1$f_stor
kde_res = kde(x, h = hlscv(x), eval.points = inputpt)$estimate
t.DP1 = Sys.time()
dpobj = DirichletProcessGaussian(x)
dpDraw = Fit(dpobj, 1000, updatePrior = FALSE, progressBar = TRUE)
dpEst = PosteriorFrame(dpDraw, inputpt, ci_size = 0.05)
t.DP2 = Sys.time()
t.DP = t.DP2 - t.DP1
length(inputpt)
f0 = trueval
mean(abs(f0-rowMeans(f_stor))/f0)
mean(abs(f0-kde_res)/f0)
mean(abs(f0-dpEst$Mean)/f0)
colnames(dpEst)
?rberdev
t.DP+t.NNDP+t.cv
90*200
90*200/3600
n
n=1000
n_replicates
true_den_num
n=n
k=ceiling(n^(0.3))
mu0=0
nu0=0.001
gamma0=1
alpha = 0.1
MC = 1000
x = rberdev(n, dnum=true_den_num)
#inputpt = seq(-3,3,length.out = 200) #should change according to support
inputpt = rberdev(500, true_den_num)
trueval = dberdev(inputpt, dnum = true_den_num)
t.cv1 = Sys.time()
phi0seq1 = seq(0.01,5,length.out = 30)
cv1 = univ_LOOCV(x, k, mu0, nu0, phi0seq1, gamma0)
phi01 = phi0seq1[which.max(cv1)]
phi0seq2 = seq(max(0, phi01-0.5),phi01+0.5,length.out = 40)
cv2 = univ_LOOCV(x, k, mu0, nu0, phi0seq2, gamma0)
phi0sq = phi0seq2[which.max(cv2)]
t.cv2 = Sys.time()
t.cv = t.cv2 - t.cv1
##Now do NNDP
t.NNDP1 = Sys.time()
N1 = uNNDP(x, MC, k, inputpt, mu0, nu0, gamma0, phi0sq, alpha)
t.NNDP2 = Sys.time()
t.NNDP = t.NNDP2 - t.NNDP1
f_stor = N1$f_stor
kde_res = kde(x, h = hlscv(x), eval.points = inputpt)$estimate
t.DP1 = Sys.time()
dpobj = DirichletProcessGaussian(x)
dpDraw = Fit(dpobj, 1000, updatePrior = FALSE, progressBar = TRUE)
dpEst = PosteriorFrame(dpDraw, inputpt, ci_size = 0.05)
t.DP2 = Sys.time()
t.DP = t.DP2 - t.DP1
#credible_bands1 = apply(res_nndp, 1, quantile, c(0.025, 0.975))
#post_mean = apply(res_nndp, 1, mean)
f0 = trueval
t.NNDP+t.cv+t.DP
164*200
164*200/3600
mean(abs(f0-rowMeans(f_stor))/f0)
mean(abs(f0-kde_res)/f0)
mean(abs(f0-dpEst$Mean)/f0)
mean(abs(f0-dpEst$Mean)^2/f0)
mean(abs(f0-kde_res)^2/f0)
mean(abs(f0-rowMeans(f_stor))^2/f0)
?optim
x=1:3
colnames(x)=c("1","2","3")
x=t(as.matrix(1:3))
colnames(x)=c("1","2","3")
x
library(benchden)
library(RcppGSL)
library(dirichletprocess)
library(ks)
library(FastKNN)
library(FNN)
library(tensorA)
library(MCMCpack)
library(abind)
library(mvtnorm)
library(CholWishart)
library(expm)
library(matrixStats)
library(Rcpp)
setwd(file.choose()) #Set correct directory where source files are situated
setwd(choose.dir()) #Set correct directory where source files are situated
Rcpp::sourceCpp("LOOCV_Univ_Faster.cpp")
Rcpp::sourceCpp("NNDP_MCSample.cpp")
source("LOOCV_Univ_phi0.R")
source("NNDP_Univariate_DisjointNbd.R")
x=rberdev(500,23)
MC=1000
k=8
inputpt = seq(-3,3,length.out = 200)
mu0=0
nu0=0.001
gamma0=1
alpha=0.1
phi0_select<-function(phi0sq)
{
return(-univ_LOOCV(x, k, mu0, nu0, phi0sq, gamma0))
}
t.optim1 = Sys.time()
L1 = optim(1, phi0_select, lower=0.0001, method = "L-BFGS-B")
t.optim2 = Sys.time()
t.optim = t.optim2 - t.optim1
phi0sq = L1$par
phi0sq
t.NNDP1 = Sys.time()
N1 = uNNDP(x, MC, k, inputpt, mu0, nu0, gamma0, phi0sq, alpha)
t.NNDP2 = Sys.time()
t.NNDP = t.NNDP2 - t.NNDP1
f_stor = N1$f_stor
time_vec = t(as.matrix(c(t.optim, t.NNDP)))
colnames(time_vec) = c("LOOCV Time", "MC Time")
hyper_par = list("n" = n, "MC" = MC, "k" = k, "inputpt" = inputpt, "mu0" = mu0, "nu0" = nu0, "gamma0" = gamma0, "phi0sq" = phi0sq, "alpha" = alpha)
n = length(x)
hyper_par = list("n" = n, "MC" = MC, "k" = k, "inputpt" = inputpt, "mu0" = mu0, "nu0" = nu0, "gamma0" = gamma0, "phi0sq" = phi0sq, "alpha" = alpha)
post_mean = rowMeans(f_stor)
output = list("samples" = f_stor, "post_mean" = post_mean, "hyper_par" = hyper_par, "time" = time_vec)
output$samples
output$post_mean
f0=dberdev(inputpt,23)
plot(inputpt, f0, type="l")
lines(inputpt, post_mean, col="red")
abs((f0-post_mean)/f0)
mean(abs((f0-post_mean)/f0))
n
x=rnorm(1000)
MC=1000
k=10
mu0
nu0
gamma0
alpha
n = length(x)
phi0_select<-function(phi0sq)
{
return(-univ_LOOCV(x, k, mu0, nu0, phi0sq, gamma0))
}
t.optim1 = Sys.time()
L1 = optim(1, phi0_select, lower=0.0001, method = "L-BFGS-B")
t.optim2 = Sys.time()
t.optim = t.optim2 - t.optim1
phi0sq = L1$par
t.NNDP1 = Sys.time()
N1 = uNNDP(x, MC, k, inputpt, mu0, nu0, gamma0, phi0sq, alpha)
t.NNDP2 = Sys.time()
t.NNDP = t.NNDP2 - t.NNDP1
f_stor = N1$f_stor
time_vec = t(as.matrix(c(t.optim, t.NNDP)))
colnames(time_vec) = c("LOOCV Time", "MC Time")
hyper_par = list("n" = n, "MC" = MC, "k" = k, "inputpt" = inputpt, "mu0" = mu0, "nu0" = nu0, "gamma0" = gamma0, "phi0sq" = phi0sq, "alpha" = alpha)
post_mean = rowMeans(f_stor)
output = list("samples" = f_stor, "post_mean" = post_mean, "hyper_par" = hyper_par, "time" = time_vec)
time_vec
t.NNDP
t.optim
f0=dnorm(inputpt)
plot(inputpt, f0, type = "l")
lines(inputpt, post_mean, col="red")
phi0sq
n=2000
x=rnorm(n)
k=ceiling(2000^(1/3))
n = length(x)
phi0_select<-function(phi0sq)
{
return(-univ_LOOCV(x, k, mu0, nu0, phi0sq, gamma0))
}
t.optim1 = Sys.time()
L1 = optim(1, phi0_select, lower=0.0001, method = "L-BFGS-B")
t.optim2 = Sys.time()
t.optim = t.optim2 - t.optim1
t.optim
8/1000^2
36/2000^2
2.5^2*36
n=5000
x=rnorm(n)
MC
k=ceiling(n^(1/3))
n = length(x)
phi0_select<-function(phi0sq)
{
return(-univ_LOOCV(x, k, mu0, nu0, phi0sq, gamma0))
}
t.optim1 = Sys.time()
L1 = optim(1, phi0_select, lower=0.0001, method = "L-BFGS-B")
t.optim2 = Sys.time()
t.optim = t.optim2 - t.optim1
t.optim
L1$par
dirichletprocess::DirichletProcessGaussian()
?dirichletprocess::DirichletProcessGaussian
?Fit
